Questions:

You have an empty sequence, and you will be given
queries. Each query is one of these three types:
1 x  -Push the element x into the stack.
2    -Delete the element present at the top of the stack.
3    -Print the maximum element in the stack.

Function Description
Complete the getMax function in the editor below.
getMax has the following parameters:
- string operations[n]: operations as strings
Returns
- int[]: the answers to each type 3 query
Input Format
The first line of input contains an integer,
. The next
lines each contain an above mentioned query.
Constraints
1<=n<=105
1<=x<=109
1<=type<=3


All queries are valid.



Sample Input
STDIN   Function
-----   --------
10      operations[] size n = 10
1 97    operations = ['1 97', '2', '1 20', ....]
2
1 20
2
1 26
1 20
2
3
1 91
3

Sample Output
26
91

Ans:
Ive performed using Java Language:


import java.util.Scanner;
import java.util.Stack;
public class getMax {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();

		Stack<Integer> mainStack = new Stack<>();
		Stack<Integer> maxStack = new Stack<>();
		maxStack.push(Integer.MIN_VALUE);

		for (int i = 0; i < N; i++) {
			int op = sc.nextInt();
			switch (op) {
			case 1:
				int item = sc.nextInt();
				mainStack.push(item);
				int maxSoFar = maxStack.peek();
				if (item > maxSoFar) {
					maxStack.push(item);
				} else {
					maxStack.push(maxSoFar);
				}
				break;
			case 2:
				mainStack.pop();
				maxStack.pop();
				break;

			case 3:

				System.out.println(maxStack.peek());
				break;
			}
		}
		sc.close();
	}
}


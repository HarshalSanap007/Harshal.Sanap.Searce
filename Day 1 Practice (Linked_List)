Linked List practice:
code for Linked List in C language:
Creation of Linked List & Traversal:
************************************************************************************************************************************************************************************
#include<stdio.h>
#include<stdlib.h>
 
struct node{
    int data;
    struct node*next;

};

void printlinkedlist(struct node*ptr){
    
    while(ptr!=NULL){
        printf("element is :%d\n",ptr->data);
        ptr=ptr->next;
        printf("\n");
    }
}
int main()
{
    struct node* Head;
    struct node*second;
    struct node*third;
    struct node*four;
    Head =(struct node*)malloc(sizeof(struct node));
    second =(struct node*)malloc(sizeof(struct node));
    third =(struct node*)malloc(sizeof(struct node));
    four=(struct node*)malloc(sizeof(struct node));
    Head->data=10;
    Head->next=second;
    second->data=20;
    second->next=third;
    third->data=30;
    third->next=four;
    four->data=40;
    four->next=NULL;
    printlinkedlist(Head);

    return 0;
}
*****************************************************************************************************************************************************************************************

Insertion in linked List:
i:insertAtBegin
ii:insertInbetween
iii:insertAfterNode
iv:insert at end

********************************************************************************************************************************************************************************
i:
struct node* insertAtbegin(struct node*Head,int data){
    struct node*ptr=(struct node*)malloc(sizeof(struct node));
    ptr->next=Head;
    ptr->data=data;
    return ptr;
}
********************************************************************************************************************************************************************************
ii:
struct node *insertinbetween(struct node *Head, int data, int index)
{
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    struct node *p = Head;
    int i = 0;
    while (i != index - 1)
    {
        p = p->next;
        i++;
    }
    ptr->data = data;
    ptr->next = p->next;
    p->next = ptr;

    return Head;
}
********************************************************************************************************************************************************************************
iii:
struct Node * insertAfterNode(struct Node *head, struct Node *prevNode, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;

    ptr->next = prevNode->next;
    prevNode->next = ptr;

    
    return head;
}

**************************************************************************************************************************************************************************************
iv:
struct Node * insertAtEnd(struct Node *head, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;
    struct Node * p = head;

    while(p->next!=NULL){
        p = p->next;
    }
    p->next = ptr;
    ptr->next = NULL;
    return head;
}
